<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="Ghost" name="Command line test" tests="59" failures="0" timestamp="4 Mar 2015 13:36:27 GMT" time="0.023" errors="0">
  <testcase name="@BeforeSuite setUp" time="0.0" classname="chapter03.hibernate.PersistenceTest">
    <failure type="java.util.ServiceConfigurationError" message="org.hibernate.integrator.spi.Integrator: Provider org.hibernate.ogm.service.impl.OgmIntegrator could not be instantiated: java.lang.NoClassDefFoundError: org/hibernate/boot/registry/StandardServiceInitiator">
      <![CDATA[java.util.ServiceConfigurationError: org.hibernate.integrator.spi.Integrator: Provider org.hibernate.ogm.service.impl.OgmIntegrator could not be instantiated: java.lang.NoClassDefFoundError: org/hibernate/boot/registry/StandardServiceInitiator
	at java.util.ServiceLoader.fail(ServiceLoader.java:224)
	at java.util.ServiceLoader.access$100(ServiceLoader.java:181)
	at java.util.ServiceLoader$LazyIterator.next(ServiceLoader.java:377)
	at java.util.ServiceLoader$1.next(ServiceLoader.java:445)
	at org.hibernate.service.classloading.internal.ClassLoaderServiceImpl.loadJavaServices(ClassLoaderServiceImpl.java:246)
	at org.hibernate.integrator.internal.IntegratorServiceImpl.<init>(IntegratorServiceImpl.java:53)
	at org.hibernate.service.internal.BootstrapServiceRegistryImpl.<init>(BootstrapServiceRegistryImpl.java:105)
	at org.hibernate.service.internal.BootstrapServiceRegistryImpl.<init>(BootstrapServiceRegistryImpl.java:73)
	at org.hibernate.service.ServiceRegistryBuilder.<init>(ServiceRegistryBuilder.java:78)
	at chapter03.hibernate.PersistenceTest.setUp(PersistenceTest.java:26)
Caused by: java.lang.NoClassDefFoundError: org/hibernate/boot/registry/StandardServiceInitiator
	at java.lang.Class.getDeclaredConstructors0(Native Method)
	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2483)
	at java.lang.Class.getConstructor0(Class.java:2793)
	at java.lang.Class.newInstance(Class.java:345)
	at java.util.ServiceLoader$LazyIterator.next(ServiceLoader.java:373)
	... 35 more
Caused by: java.lang.ClassNotFoundException: org.hibernate.boot.registry.StandardServiceInitiator
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 40 more
... Removed 28 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeSuite setUp -->
  <testcase name="@BeforeMethod clearInfinispan" time="0.0" classname="chapter12.InfinispanTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod clearInfinispan -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="chapter03.hibernate.PersonTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod shutDown" time="0.0" classname="chapter03.hibernate.PersonTest">
    <skipped/>
  </testcase> <!-- @AfterMethod shutDown -->
  <testcase name="@BeforeMethod populateData" time="0.0" classname="chapter09.QueryTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod populateData -->
  <testcase name="@AfterMethod closeSession" time="0.0" classname="chapter09.QueryTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeSession -->
  <testcase name="@BeforeMethod populateData" time="0.0" classname="chapter09.QueryTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod populateData -->
  <testcase name="@AfterMethod closeSession" time="0.0" classname="chapter09.QueryTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeSession -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod shutDown" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- @AfterMethod shutDown -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod shutDown" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- @AfterMethod shutDown -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod shutDown" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- @AfterMethod shutDown -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod shutDown" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- @AfterMethod shutDown -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="chapter03.hibernate.SkillTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod shutDown" time="0.0" classname="chapter03.hibernate.SkillTest">
    <skipped/>
  </testcase> <!-- @AfterMethod shutDown -->
  <testcase name="@BeforeMethod populateData" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod populateData -->
  <testcase name="@AfterMethod closeSession" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeSession -->
  <testcase name="@BeforeMethod populateData" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod populateData -->
  <testcase name="@AfterMethod closeSession" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeSession -->
  <testcase name="@BeforeMethod populateData" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod populateData -->
  <testcase name="@AfterMethod closeSession" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeSession -->
  <testcase name="@BeforeMethod populateData" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod populateData -->
  <testcase name="@AfterMethod closeSession" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeSession -->
  <testcase name="@BeforeMethod populateData" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod populateData -->
  <testcase name="@AfterMethod closeSession" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- @AfterMethod closeSession -->
  <testcase name="@AfterMethod clearDB" time="0.0" classname="chapter12.MongodbTest">
    <skipped/>
  </testcase> <!-- @AfterMethod clearDB -->
  <testcase name="ImpliedRelationship" time="0.001" classname="chapter04.mapped.AssociationTest">
    <skipped/>
  </testcase> <!-- ImpliedRelationship -->
  <testcase name="testCR" time="0.0" classname="chapter12.InfinispanTest">
    <skipped/>
  </testcase> <!-- testCR -->
  <testcase name="getEntityManager" time="0.0" classname="chapter07.jpasession.JPASessionTest">
    <skipped/>
  </testcase> <!-- getEntityManager -->
  <testcase name="getSession" time="0.0" classname="chapter07.jpasession.JPASessionTest">
    <skipped/>
  </testcase> <!-- getSession -->
  <testcase name="nonexistentEntityManagerName" time="0.0" classname="chapter07.jpasession.JPASessionTest">
    <skipped/>
  </testcase> <!-- nonexistentEntityManagerName -->
  <testcase name="nonexistentSession" time="0.0" classname="chapter07.jpasession.JPASessionTest">
    <skipped/>
  </testcase> <!-- nonexistentSession -->
  <testcase name="testEntityManager" time="0.0" classname="chapter07.jpasession.JPASessionTest">
    <skipped/>
  </testcase> <!-- testEntityManager -->
  <testcase name="testSession" time="0.0" classname="chapter07.jpasession.JPASessionTest">
    <skipped/>
  </testcase> <!-- testSession -->
  <testcase name="testLifeCycle" time="0.0" classname="chapter07.lifecycle.LifecycleTest">
    <skipped/>
  </testcase> <!-- testLifeCycle -->
  <testcase name="testBrokenInversionCode" time="0.0" classname="chapter04.broken.MappingBrokenTest">
    <skipped/>
  </testcase> <!-- testBrokenInversionCode -->
  <testcase name="testProperSimpleInversionCode" time="0.0" classname="chapter04.broken.MappingBrokenTest">
    <skipped/>
  </testcase> <!-- testProperSimpleInversionCode -->
  <testcase name="testModelCreation" time="0.0" classname="chapter03.hibernate.ModelTest">
    <skipped/>
  </testcase> <!-- testModelCreation -->
  <testcase name="testGetByNaturalID" time="0.0" classname="chapter06.naturalid.NaturalIDTest">
    <skipped/>
  </testcase> <!-- testGetByNaturalID -->
  <testcase name="testLoadByNaturalID" time="0.0" classname="chapter06.naturalid.NaturalIDTest">
    <skipped/>
  </testcase> <!-- testLoadByNaturalID -->
  <testcase name="testSimpleNaturalID" time="0.0" classname="chapter06.naturalid.NaturalIDTest">
    <skipped/>
  </testcase> <!-- testSimpleNaturalID -->
  <testcase name="orphanRemovalTest" time="0.0" classname="chapter04.orpahn.OrphanRemovalTest">
    <skipped/>
  </testcase> <!-- orphanRemovalTest -->
  <testcase name="saveMessage" time="0.0" classname="chapter03.hibernate.PersistenceTest">
    <skipped/>
  </testcase> <!-- saveMessage -->
  <testcase name="testMerge" time="0.0" classname="chapter04.general.PersistingEntityesTest">
    <skipped/>
  </testcase> <!-- testMerge -->
  <testcase name="testRefresh" time="0.0" classname="chapter04.general.PersistingEntityesTest">
    <skipped/>
  </testcase> <!-- testRefresh -->
  <testcase name="testSaveLoad" time="0.0" classname="chapter04.general.PersistingEntityesTest">
    <skipped/>
  </testcase> <!-- testSaveLoad -->
  <testcase name="testSaveLoad2" time="0.0" classname="chapter04.general.PersistingEntityesTest">
    <skipped/>
  </testcase> <!-- testSaveLoad2 -->
  <testcase name="testSaveOrUpdateEntity" time="0.0" classname="chapter04.general.PersistingEntityesTest">
    <skipped/>
  </testcase> <!-- testSaveOrUpdateEntity -->
  <testcase name="testSavingEntitiesTwice" time="0.0" classname="chapter04.general.PersistingEntityesTest">
    <skipped/>
  </testcase> <!-- testSavingEntitiesTwice -->
  <testcase name="testSavePerson" time="0.0" classname="chapter03.hibernate.PersonTest">
    <skipped/>
  </testcase> <!-- testSavePerson -->
  <testcase name="testNamedQuery" time="0.0" classname="chapter09.QueryTest">
    <skipped/>
  </testcase> <!-- testNamedQuery -->
  <testcase name="testSimpleQuery" time="0.0" classname="chapter09.QueryTest">
    <skipped/>
  </testcase> <!-- testSimpleQuery -->
  <testcase name="addRanking" time="0.0" classname="chapter03.hibernate.RankingServiceTest">
    <skipped/>
  </testcase> <!-- addRanking -->
  <testcase name="findAllRankings" time="0.0" classname="chapter03.hibernate.RankingServiceTest">
    <skipped/>
  </testcase> <!-- findAllRankings -->
  <testcase name="findAllRankingsEmptySet" time="0.0" classname="chapter03.hibernate.RankingServiceTest">
    <skipped/>
  </testcase> <!-- findAllRankingsEmptySet -->
  <testcase name="findBestForNonexistentSkill" time="0.0" classname="chapter03.hibernate.RankingServiceTest">
    <skipped/>
  </testcase> <!-- findBestForNonexistentSkill -->
  <testcase name="findBestForSkill" time="0.0" classname="chapter03.hibernate.RankingServiceTest">
    <skipped/>
  </testcase> <!-- findBestForSkill -->
  <testcase name="removeRanking" time="0.0" classname="chapter03.hibernate.RankingServiceTest">
    <skipped/>
  </testcase> <!-- removeRanking -->
  <testcase name="updateExistingRanking" time="0.0" classname="chapter03.hibernate.RankingServiceTest">
    <skipped/>
  </testcase> <!-- updateExistingRanking -->
  <testcase name="updateNonExistingRanking" time="0.0" classname="chapter03.hibernate.RankingServiceTest">
    <skipped/>
  </testcase> <!-- updateNonExistingRanking -->
  <testcase name="changeRangking" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- changeRangking -->
  <testcase name="removeRanking" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- removeRanking -->
  <testcase name="testRankings" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- testRankings -->
  <testcase name="testSaveRanking" time="0.0" classname="chapter03.hibernate.RankingTest">
    <skipped/>
  </testcase> <!-- testSaveRanking -->
  <testcase name="testSaveSkill" time="0.0" classname="chapter03.hibernate.SkillTest">
    <skipped/>
  </testcase> <!-- testSaveSkill -->
  <testcase name="createValidNoFNamePerson" time="0.0" classname="chapter07.validated.ValidatedTest">
    <skipped/>
  </testcase> <!-- createValidNoFNamePerson -->
  <testcase name="createValidPerson" time="0.0" classname="chapter07.validated.ValidatedTest">
    <skipped/>
  </testcase> <!-- createValidPerson -->
  <testcase name="createValidPoorFNamePerson" time="0.0" classname="chapter07.validated.ValidatedTest">
    <skipped/>
  </testcase> <!-- createValidPoorFNamePerson -->
  <testcase name="createValidUnderagePerson" time="0.0" classname="chapter07.validated.ValidatedTest">
    <skipped/>
  </testcase> <!-- createValidUnderagePerson -->
  <testcase name="testSortingResult" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- testSortingResult -->
  <testcase name="testQueryByExampleForProduct" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- testQueryByExampleForProduct -->
  <testcase name="testPagingResult" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- testPagingResult -->
  <testcase name="testLikeCriteria" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- testLikeCriteria -->
  <testcase name="testQueryByExampleForSupplier" time="0.0" classname="chapter10.CriteriaTest">
    <skipped/>
  </testcase> <!-- testQueryByExampleForSupplier -->
  <testcase name="testVaildCoordinate" time="0.0" classname="chapter07.validated.CoordinateTest">
    <skipped/>
  </testcase> <!-- testVaildCoordinate -->
  <testcase name="testVaildCoordinate" time="0.0" classname="chapter07.validated.CoordinateTest">
    <skipped/>
  </testcase> <!-- testVaildCoordinate -->
  <testcase name="testVaildCoordinate" time="0.0" classname="chapter07.validated.CoordinateTest">
    <skipped/>
  </testcase> <!-- testVaildCoordinate -->
  <testcase name="testVaildCoordinate" time="0.0" classname="chapter07.validated.CoordinateTest">
    <skipped/>
  </testcase> <!-- testVaildCoordinate -->
  <testcase name="testVaildCoordinate" time="0.001" classname="chapter07.validated.CoordinateTest">
    <skipped/>
  </testcase> <!-- testVaildCoordinate -->
  <testcase name="testVaildCoordinate" time="0.0" classname="chapter07.validated.CoordinateTest">
    <skipped/>
  </testcase> <!-- testVaildCoordinate -->
  <testcase name="testVaildCoordinate" time="0.0" classname="chapter07.validated.CoordinateTest">
    <skipped/>
  </testcase> <!-- testVaildCoordinate -->
  <testcase name="testVaildCoordinate" time="0.0" classname="chapter07.validated.CoordinateTest">
    <skipped/>
  </testcase> <!-- testVaildCoordinate -->
  <testcase name="testInvalidCoordinate" time="0.0" classname="chapter07.validated.CoordinateTest">
    <skipped/>
  </testcase> <!-- testInvalidCoordinate -->
  <testcase name="testCR" time="0.0" classname="chapter12.MongodbTest">
    <skipped/>
  </testcase> <!-- testCR -->
  <testcase name="readMessage" time="0.0" classname="chapter03.hibernate.PersistenceTest">
    <skipped/>
  </testcase> <!-- readMessage -->
</testsuite> <!-- Command line test -->
